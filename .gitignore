# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.swp
*.o
# C extensions
*.so

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
#
# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

*.TXT
*.txt

RNN_PREDICT
RNN_TRAIN

#directories
input_files/
output_files/

MatrixXd* Load_Data_Hw3_tmp(const char* filename, MatrixXd *data, int Blank_Pos[], int *ptr_num_data)
{
    ifstream fin(filename);
    FILE *File;
    File = fopen(filename, "r");
    char str[2000];
    string s;
    int max_n = 2000;

    fgets(str, max_n, File);  getline(fin, s);
    fgets(str, max_n, File);  getline(fin, s);

    //cout<<"str:"<<str<<endl;

    sscanf(str, "%d", ptr_num_data);
    (*ptr_num_data) = min (*ptr_num_data, MAX_NUM_DATA);

    int num_data = *ptr_num_data;
    //cout<<"num_data:"<<num_data<<endl;
    
    data = new MatrixXd [num_data];
    //Blank_Pos = new int [num_data];

    int row;
    int col;

    for (int i=0; i<num_data; i++)
    {
        cout<<"Load Data: "<<i<<" / "<<num_data<<endl;
        fgets(str, max_n, File); getline(fin, s); //-----
        fgets(str, max_n, File); getline(fin, s); //col:
        fgets(str, max_n, File); getline(fin, s); 
        sscanf(str, "%d", &row); 

        fgets(str, max_n, File); getline(fin, s); //cols:
        fgets(str, max_n, File); getline(fin, s); 
        sscanf(str, "%d", &col); 

        fgets(str, max_n, File); getline(fin, s); //blank position
        fgets(str, max_n, File); getline(fin, s); 
        sscanf(str, "%d", Blank_Pos+i); 
        
        fgets(str, max_n, File); getline(fin, s);

        data[i] = MatrixXd::Constant(row, col, 0);

        for (int j=0; j<row; j++)
        {
            fgets(str, max_n, File);
preprocess/
